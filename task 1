"""
We'll try to understand classes in python. 
Check the resources on google classroom to ensure you have gone through everything expected.

"""
###### THESE LISTS HAVE ALREADY BEEN DEFINED FOR YOU ###############
engineer_roster = [] # A list of all instantiated engineer objects
sales_roster = [] # List of all instantiated sales objects
branchmap = {  # A dictionary of dictionaries -> Maps branchcodes to cities and branch names
    0:  { "city": "NYC", "name": "Hudson Yards"},
    1:  { "city": "NYC" , "name": "Silicon Alley"},
    2:  { "city": "Mumbai", "name": "BKC"},
    3:  { "city": "Tokyo", "name": "Shibuya"},
    4:  { "city": "Mumbai", "name": "Goregaon"},
    5:  { "city": "Mumbai", "name": "Fort"}
}
####################################################################

class Employee:
    name : str 
    age : int
    ID : int
    city : int
    branches : list[int] # This is a list of branches (as branch codes) to which the employee may report
    salary : int 

    def __init__(self, name, age, ID, city,\
                 branchcodes, salary = None):
        self.name = name
        self.age = age 
        self.ID = ID
        self.city = city
        self.branches = branchcodes
        if salary is not None: self.salary = salary
        else: self.salary = 10_000 
    
    def change_city(self, new_city:str) -> bool:
        # Change the city
        old_city=self.city
        self.city=new_city 
        if(old_city!=new_city):
            return True
        else:
            return False
        # Return true if city change, successful, return false if city same as old city
        pass

    def migrate_branch(self, new_code:int) -> bool:
        # Should work only on those employees who have a single 
        # branch to report to. Fail for others.
        if len(self.branches) != 1:
            return False
        if branchmap[new_code]["city"] != self.city:
            return False
        self.branches = [new_code]
        return True
        # Change old branch to new if it is in the same city, else return false.
        pass

    def increment(self, increment_amt: int) -> None:
        # Increment salary by amount specified.
        self.salary+=increment_amt
        pass





class Engineer(Employee):
    position : str # Position in organization Hierarchy

    def __init__(self, name, age, ID, city,\
                 branchcodes, position= "Junior", salary = None):
        # Call the parent's constructor
        super().__init__(name, age, ID, city, branchcodes, salary)
        
        # Check if position is one of  "Junior", "Senior", "Team Lead", or "Director" .
        if(position=="Junior" or position=="Senior" or position=="Team Lead" or position=="Director"):
            self.position=position
        # Only then set the position. 

    
    def increment(self, amt:int) -> None:
        # While other functions are the same for and engineer,
        super().increment(amt + int(0.1 * self.salary))
        # and increment to an engineer's salary should add a 10% bonus on to "amt"
        pass
        
    def promote(self, position:str) -> bool:
        # Return false for a demotion or an invalid promotion
        if(engineer.position=="Junior"):
            engineer.position="Senior"
            amt=0.3*self.salary
            increment(amt)
            return True
        elif(engineer.position=="Senior"):
            engineer.position="Team Lead"
            amt=0.3*self.salary
            increment(amt)
            return True
        elif(engineer.position=="Team Lead"):
            engineer.position="Director"
            amt=0.3*self.salary
            increment(amt)
            return True
        else:
            return False
        # Promotion can only be to a higher position and
        # it should call the increment function with 30% of the present salary
        # as "amt". Thereafter return True.
        



class Salesman(Employee):
    """ 
    This class is to be entirely designed by you.

    Add increment (this time only a 5% bonus) and a promotion function
    This time the positions are: Rep -> Manager -> Head.

    Add an argument in init which tracks who is the superior
    that the employee reports to. This argument should be the ID of the superior
    It should be None for a "Head" and so, the argument should be optional in init.
    """
    
    # An extra member variable!
    superior : int # EMPLOYEE ID of the superior this guy reports to

    def __init__(self,name, age, ID, city,\
                 branchcodes, superior, salary = None ): # Complete all this! Add arguments
         
         self.superior=superior
         super().__init__(name, age, ID, city, branchcodes, salary)

     def increment(self, amt:int) -> None:
       super().increment(amt + int(0.05 * self.salary))

         
    # def promote 
    def promote(self, position:str) -> bool:
        # Return false for a demotion or an invalid promotion
        if(engineer.position=="Rep"):
            engineer.position="Manager"
            amt=0.3*self.salary
            increment(amt)
            return True
        elif(engineer.position=="Manager"):
            engineer.position="Head"
            amt=0.3*self.salary
            increment(amt)
            return True
        else:
            return False
    # def increment 

    def find_superior(self) -> tuple[int, str]:
        # Return the employee ID and name of the superior
        if self.superior is not None:
            return self.superior
        return None
        # Report a tuple of None, None if no superior.
        

    def add_superior(self) -> bool:
        # Add superior of immediately higher rank.
        if self.superior:
            self.superior= superior
            return True
        return False
        # If superior doesn't exist return false,
        

    def migrate_branch(self, new_code: int) -> bool:
        # This should simply add a branch to the list; even different cities are fine
        self.branches.append(new_code)
        return True

    """
This is where the actual working of the program will happen!
We'll be Querying stuff for testing whether your classes were defined correctly

Whenever something inappropriate happens (like a function returning false in people.py),
raise a Value Error.
"""
from people import * # import everything!

if __name__ == "__main__":  # Equivalent to int main() {} in C++.
    last_input = 99
    while last_input != 0:
        last_input = int(input("Please enter a query number:"))

        if last_input == 1:
            name = input("Name:")
            age=input("age")
            ID = input("ID:")
            city = input("City:")
            branchcodes = input("Branch(es):")
            # How will you conver this to a list, given that
            # the user will always enter a comma separated list of branch codes?
            branchcode_list = [int(code.strip()) for code in branchcodes.split(',')]
            # eg>   2,5
            position=input("position: ")
            salary = input("Salary: ")
            # Create a new Engineer with given details.
            engineer=Engineer(name,age,ID,city,branchcode_list,position,salary) # Change this

            engineer_roster.append(engineer) # Add him to the list! See people.py for definiton
            
        
        elif last_input == 2:
             # Gather input to create a Salesperson
            name = input("Name:")
            age= input("age")
            ID = input("ID:")
            city = input("City:")
            branchcodes = input("Branch(es):")
            branchcode_list = [int(code.strip()) for code in branchcodes.split(',')]
            
            superior=input("superior: ")
            salary = input("Salary: ")

            salesman= Salesman(self,name, age, ID, city, branchcode_list, superior, salary)

            sales_roster.append(salesman)
            # Then add them to the roster
            

        elif last_input == 3:
            ID = int(input("ID: "))
            # Print employee details for the given employee ID that is given. 
            
            found_employee = None
            for employee in engineer_roster + sales_roster:
                if employee.ID == int(ID):
                    found_employee = employee
                    break
            
            if not found_employee: print("No such employee")
            else:
                print(f"Name: {found_employee.name} and Age: {found_employee.age}")
                print(f"City of Work: {found_employee.city}")

                ## Write code here to list the branch names to
                ## which the employee reports as a comma separated list
                ## eg> Branches: Goregaon,Fort
                branch_names = [branchmap[code] for code in found_employee.branchcodes]
                ## ???? what comes here??
                print(f"Branches: {', '.join(branch_names)}")
                # print(f"Branches: " + ???? )
                
                print(f"Salary: {found_employee.salary}")

        elif last_input == 4:
            #### NO IF ELSE ZONE ######################################################
            # Change branch to new branch or add a new branch depending on class
            
            # Inheritance should automatically do this. 
            # There should be no IF-ELSE or ternary operators in this zone
            pass
            #### NO IF ELSE ZONE ENDS #################################################

        elif last_input == 5:
            ID = int(input("Enter Employee ID to promote: "))
            # promote employee to next position
            found_employee = None
            for employee in engineer_roster + sales_roster:
                if employee.ID == ID:
                    found_employee = employee
                    break
            if found_employee:
                found_employee.promote(found_employee.position)

        elif last_input == 6:
            ID = int(input("Enter Employee ID to give increment: "))
            # Increment salary of employee.
            found_employee = None
            for employee in engineer_roster + sales_roster:
                if employee.ID == ID:
                    found_employee = employee
                    break
            if found_employee:
                found_employee.increment(increment_amt)
        
        elif last_input == 7:
            ID = int(input("Enter Employee ID to find superior: "))
            found_employee = None
            for employee in sales_roster:
                if employee.ID == ID:
                    found_employee = employee
                    break
            if found_employee:
                superior_id = found_employee.find_superior()
                if superior_id:
                    print(f"Superior ID: {superior_id}")
                else:
                    print("This employee has no superior.")
            else:
                print("No such employee.")
            # Print superior of the sales employee.
        
        elif last_input == 8:
            ID_E = int(input("Enter Employee ID to add superior: "))
            ID_S = int(input("Enter Employee ID of superior: "))
            # Add superior of a sales employee
            found_employee = None
            superior_employee = None
            for employee in engineer_roster + sales_roster:
                if employee.ID == ID_E:
                    found_employee = employee
                if employee.ID == ID_S:
                    superior_employee = employee
            if found_employee and superior_employee:
                success = found_employee.add_superior(superior_employee.ID)
                print("Superior added successfully." if success else "Adding superior failed.")
        else:
            raise ValueError("No such query number defined")

            
            

            


            


        











    
    
